/**
 * @file game.proto
 * Define message format for representing one game
 */

syntax = "proto3";
package proto;

message TerrainElement {
	enum TERRAIN_TYPE {
		WATER = 0;
		LAND = 1;
	};
	TERRAIN_TYPE type = 1;
}

message TerrainRow { repeated TerrainElement elements = 1; }

message Terrain { repeated TerrainRow rows = 1; }

enum SOLDIER_STATE {
	IDLE = 0;
	MOVE = 1;
	ATTACK = 2;
	DEAD = 3;
};

message Soldier {
	int32 hp = 3;
	int32 x = 4;
	int32 y = 5;
	SOLDIER_STATE state = 6;
}

message Tower {
	int32 id = 1;
	int32 player_id = 2; // Sent first time only
	int32 hp = 3;
	int32 x = 4;           //
	int32 y = 5;           // Sent first time only
	bool is_base = 7;      // Sent first time only
	int32 tower_level = 8; // Sent if tower is upgraded
	bool is_dead = 9;      // Sent if tower is destroyed
}

message PlayerError { repeated int32 errors = 1; }

/**
 * Represents the state of a game at a particular frame
 */
message GameState {
	/**
	 * List of all soldiers whose properties change
	 * All soldiers are sent during the first frame
	 */
	repeated Soldier soldiers = 1;

	/**
	 * List of all towers whose properties change
	 * All towers are sent during the first frame
	 */
	repeated Tower towers = 2;

	/**
	 * Player money
	 */
	repeated int64 money = 3;

	/**
	 * Instruction counts corresponding to each player
	 * If the instruction limit causes a complete game abort, the last frame's
	 * instruction_limit_error will hold the offending frame's inst. count
	 */
	repeated int64 instruction_counts = 4;

	/**
	 * Runtime rule violation errors corresponding to each player
	 * Stores only the error codes, the error_map will contain the messages
	 */
	repeated PlayerError player_errors = 5;
}

/**
 * Represents a complete game, which is a sequence of frames
 */
message Game {

	/**
	 * Map with terrain information
	 * Sent only during the first frame
	 */
	Terrain terrain = 1;

	/**
	 * Range of a tower, corresponding to each tower level
	 */
	repeated int32 tower_ranges = 2;

	/**
	 * Maximum HP of a tower, corresponding to each tower level
	 */
	repeated int32 tower_max_hps = 3;

	/**
	 * Maximum HP of a soldier
	 */
	int32 soldier_max_hp = 4;

	/**
	 * Mapping of error codes and error strings
	 */
	map<int32, string> error_map = 5;

	/**
	 * Player turn is cancelled if this inst. limit is crossed
	 */
	int64 inst_limit_turn = 6;

	/**
	 * Player game is cancelled if this inst. limit is crossed
	 */
	int64 inst_limit_game = 7;

	/**
	 * A list of states, representing the entire game
	 */
	repeated GameState states = 8;
}
